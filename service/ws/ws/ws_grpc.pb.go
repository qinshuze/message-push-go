// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: ws.proto

package ws

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ws_Ping_FullMethodName      = "/ws.Ws/Ping"
	Ws_JoinRoom_FullMethodName  = "/ws.Ws/JoinRoom"
	Ws_LeaveRoom_FullMethodName = "/ws.Ws/LeaveRoom"
	Ws_AddTag_FullMethodName    = "/ws.Ws/AddTag"
	Ws_RemoveTag_FullMethodName = "/ws.Ws/RemoveTag"
	Ws_Count_FullMethodName     = "/ws.Ws/Count"
	Ws_Push_FullMethodName      = "/ws.Ws/Push"
	Ws_Clients_FullMethodName   = "/ws.Ws/Clients"
)

// WsClient is the client API for Ws service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WsClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error)
	// JoinRoom 加入房间
	JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomRes, error)
	// LeaveRoom 离开房间
	LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomRes, error)
	// AddTag 添加标签
	AddTag(ctx context.Context, in *AddTagsReq, opts ...grpc.CallOption) (*AddTagsResp, error)
	// RemoveTag 移除标签
	RemoveTag(ctx context.Context, in *RemoveTagsReq, opts ...grpc.CallOption) (*RemoveTagsResp, error)
	// Count 获取客户端连接数量
	Count(ctx context.Context, in *CountReq, opts ...grpc.CallOption) (*CountRes, error)
	// Push 推送消息
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushRes, error)
	// Clients 查询客户端
	Clients(ctx context.Context, in *ClientsReq, opts ...grpc.CallOption) (*ClientsRes, error)
}

type wsClient struct {
	cc grpc.ClientConnInterface
}

func NewWsClient(cc grpc.ClientConnInterface) WsClient {
	return &wsClient{cc}
}

func (c *wsClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error) {
	out := new(PingRes)
	err := c.cc.Invoke(ctx, Ws_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomRes, error) {
	out := new(JoinRoomRes)
	err := c.cc.Invoke(ctx, Ws_JoinRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomRes, error) {
	out := new(LeaveRoomRes)
	err := c.cc.Invoke(ctx, Ws_LeaveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) AddTag(ctx context.Context, in *AddTagsReq, opts ...grpc.CallOption) (*AddTagsResp, error) {
	out := new(AddTagsResp)
	err := c.cc.Invoke(ctx, Ws_AddTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) RemoveTag(ctx context.Context, in *RemoveTagsReq, opts ...grpc.CallOption) (*RemoveTagsResp, error) {
	out := new(RemoveTagsResp)
	err := c.cc.Invoke(ctx, Ws_RemoveTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) Count(ctx context.Context, in *CountReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, Ws_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushRes, error) {
	out := new(PushRes)
	err := c.cc.Invoke(ctx, Ws_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wsClient) Clients(ctx context.Context, in *ClientsReq, opts ...grpc.CallOption) (*ClientsRes, error) {
	out := new(ClientsRes)
	err := c.cc.Invoke(ctx, Ws_Clients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WsServer is the server API for Ws service.
// All implementations must embed UnimplementedWsServer
// for forward compatibility
type WsServer interface {
	Ping(context.Context, *PingReq) (*PingRes, error)
	// JoinRoom 加入房间
	JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomRes, error)
	// LeaveRoom 离开房间
	LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomRes, error)
	// AddTag 添加标签
	AddTag(context.Context, *AddTagsReq) (*AddTagsResp, error)
	// RemoveTag 移除标签
	RemoveTag(context.Context, *RemoveTagsReq) (*RemoveTagsResp, error)
	// Count 获取客户端连接数量
	Count(context.Context, *CountReq) (*CountRes, error)
	// Push 推送消息
	Push(context.Context, *PushReq) (*PushRes, error)
	// Clients 查询客户端
	Clients(context.Context, *ClientsReq) (*ClientsRes, error)
	mustEmbedUnimplementedWsServer()
}

// UnimplementedWsServer must be embedded to have forward compatible implementations.
type UnimplementedWsServer struct {
}

func (UnimplementedWsServer) Ping(context.Context, *PingReq) (*PingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWsServer) JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedWsServer) LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedWsServer) AddTag(context.Context, *AddTagsReq) (*AddTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedWsServer) RemoveTag(context.Context, *RemoveTagsReq) (*RemoveTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (UnimplementedWsServer) Count(context.Context, *CountReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedWsServer) Push(context.Context, *PushReq) (*PushRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedWsServer) Clients(context.Context, *ClientsReq) (*ClientsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clients not implemented")
}
func (UnimplementedWsServer) mustEmbedUnimplementedWsServer() {}

// UnsafeWsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WsServer will
// result in compilation errors.
type UnsafeWsServer interface {
	mustEmbedUnimplementedWsServer()
}

func RegisterWsServer(s grpc.ServiceRegistrar, srv WsServer) {
	s.RegisterService(&Ws_ServiceDesc, srv)
}

func _Ws_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).JoinRoom(ctx, req.(*JoinRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).LeaveRoom(ctx, req.(*LeaveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).AddTag(ctx, req.(*AddTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_RemoveTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).RemoveTag(ctx, req.(*RemoveTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).Count(ctx, req.(*CountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ws_Clients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServer).Clients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ws_Clients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServer).Clients(ctx, req.(*ClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ws_ServiceDesc is the grpc.ServiceDesc for Ws service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ws_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ws.Ws",
	HandlerType: (*WsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Ws_Ping_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Ws_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _Ws_LeaveRoom_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Ws_AddTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _Ws_RemoveTag_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Ws_Count_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Ws_Push_Handler,
		},
		{
			MethodName: "Clients",
			Handler:    _Ws_Clients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws.proto",
}
