// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applicationFieldNames          = builder.RawFieldNames(&Application{}, true)
	applicationRows                = strings.Join(applicationFieldNames, ",")
	applicationRowsExpectAutoSet   = strings.Join(stringx.Remove(applicationFieldNames, "id"), ",")
	applicationRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(applicationFieldNames, "id"))
)

type (
	applicationModel interface {
		Insert(ctx context.Context, data *Application) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Application, error)
		FindOneByAccessKey(ctx context.Context, accessKey string) (*Application, error)
		Update(ctx context.Context, data *Application) error
		Delete(ctx context.Context, id int64) error
	}

	defaultApplicationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Application struct {
		Id           int64  `db:"id"`
		UserId       int64  `db:"user_id"`       // 用户id
		Name         string `db:"name"`          // 名称
		AccessKey    string `db:"access_key"`    // 访问标识
		AccessSecret string `db:"access_secret"` // 访问密钥
		Remark       string `db:"remark"`        // 备注
		CreateTime   int64  `db:"create_time"`   // 创建时间
	}
)

func newApplicationModel(conn sqlx.SqlConn) *defaultApplicationModel {
	return &defaultApplicationModel{
		conn:  conn,
		table: `"public"."application"`,
	}
}

func (m *defaultApplicationModel) withSession(session sqlx.Session) *defaultApplicationModel {
	return &defaultApplicationModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."application"`,
	}
}

func (m *defaultApplicationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultApplicationModel) FindOne(ctx context.Context, id int64) (*Application, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", applicationRows, m.table)
	var resp Application
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationModel) FindOneByAccessKey(ctx context.Context, accessKey string) (*Application, error) {
	var resp Application
	query := fmt.Sprintf("select %s from %s where access_key = $1 limit 1", applicationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, accessKey)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationModel) Insert(ctx context.Context, data *Application) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, applicationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Name, data.AccessKey, data.AccessSecret, data.Remark, data.CreateTime)
	return ret, err
}

func (m *defaultApplicationModel) Update(ctx context.Context, newData *Application) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, applicationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.UserId, newData.Name, newData.AccessKey, newData.AccessSecret, newData.Remark, newData.CreateTime)
	return err
}

func (m *defaultApplicationModel) tableName() string {
	return m.table
}
