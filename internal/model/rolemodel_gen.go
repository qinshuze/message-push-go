// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{}, true)
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "id"), ",")
	roleRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(roleFieldNames, "id"))
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Role, error)
		FindOneByName(ctx context.Context, name string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Role struct {
		Id         int64  `db:"id"`
		Name       string `db:"name"`        // 名称
		Enabled    bool   `db:"enabled"`     // 是否启用
		Remark     string `db:"remark"`      // 备注
		CreateTime int64  `db:"create_time"` // 创建时间
		CreatorId  int64  `db:"creator_id"`  // 创建人id
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: `"public"."role"`,
	}
}

func (m *defaultRoleModel) withSession(session sqlx.Session) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."role"`,
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id int64) (*Role, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", roleRows, m.table)
	var resp Role
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneByName(ctx context.Context, name string) (*Role, error) {
	var resp Role
	query := fmt.Sprintf("select %s from %s where name = $1 limit 1", roleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, roleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Enabled, data.Remark, data.CreateTime, data.CreatorId)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, roleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Name, newData.Enabled, newData.Remark, newData.CreateTime, newData.CreatorId)
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
