// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{}, true)
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "id"), ",")
	userRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userFieldNames, "id"))
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByAccount(ctx context.Context, account string) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id            int64  `db:"id"`
		Email         string `db:"email"`           // 邮箱号
		Password      string `db:"password"`        // 密码
		Nickname      string `db:"nickname"`        // 昵称
		Avatar        string `db:"avatar"`          // 头像
		LastLoginTime int64  `db:"last_login_time"` // 最后登陆时间
		LastLoginIp   string `db:"last_login_ip"`   // 最后登陆IP地址
		CreateTime    int64  `db:"create_time"`     // 创建时间
		Enabled       bool   `db:"enabled"`         // 是否启用
		Account       string `db:"account"`         // 账号
		CreatorId     int64  `db:"creator_id"`      // 创建人id
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: `"public"."user"`,
	}
}

func (m *defaultUserModel) withSession(session sqlx.Session) *defaultUserModel {
	return &defaultUserModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."user"`,
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByAccount(ctx context.Context, account string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where account = $1 limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, account)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where email = $1 limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Email, data.Password, data.Nickname, data.Avatar, data.LastLoginTime, data.LastLoginIp, data.CreateTime, data.Enabled, data.Account, data.CreatorId)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Email, newData.Password, newData.Nickname, newData.Avatar, newData.LastLoginTime, newData.LastLoginIp, newData.CreateTime, newData.Enabled, newData.Account, newData.CreatorId)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
